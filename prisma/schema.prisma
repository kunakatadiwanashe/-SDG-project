

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Appointment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  doctorId    String   @db.ObjectId
  date        DateTime
  status      String   @default("pending") // pending, confirmed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Donation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  createdAt      DateTime @default(now())
  helpRequestId  String?

}

model HelpRequest {
     id          String   @id @default(auto()) @map("_id") @db.ObjectId
    message   String
    createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}



model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            String    @default("user")
  isEmailVerified Boolean   @default(false)
  isDoctor          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Account         Account[]

}

model Doctor {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  lastName       String
  specialization String
  experience     String
  address        String
  email          String   @unique
  status         String   @default("pending") // pending, approved, rejected
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 

  @@unique([provider, providerAccountId])
}
